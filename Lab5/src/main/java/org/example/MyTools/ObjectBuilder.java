package org.example.MyTools;



import org.example.MyCollection.Data.Entity;
import org.example.MyStream.ConsoleHandler.ConsoleInput;
import org.example.MyStream.ConsoleHandler.ConsoleOutput;
import org.example.MyStream.FileHandler.FileInput;
import org.example.MyStream.InputHandler;
import org.example.MyStream.OutputHandler;
import org.example.MyTools.Validators.Validator;
import org.example.MyStream.*;

import java.io.IOException;
import java.util.HashMap;
import java.util.UUID;

public class ObjectBuilder {
    InputHandler input;
    OutputHandler output;
    private int errCounter = 0;

    public ObjectBuilder(){
        this.input = new ConsoleInput();
        this.output = new ConsoleOutput();
    }

    public int genereteID(){
        UUID uuid =  UUID.randomUUID();
        return uuid.hashCode();
    }


    public ObjectBuilder(InputHandler inputHandler, OutputHandler outputHandler){
        this.input = inputHandler;
        this.output = outputHandler;
    }

    public <T extends Entity> T buildDialogue(ObjectReflect tree) {
        return buildDialogue(tree, null);
    }

    public <T extends Entity> T buildDialogue(ObjectReflect tree, T oldObj) {
        output.println(tree.getFields().size() + "");
        T obj = (T) tree.constructor.get();
        HashMap<String, Object> values = new HashMap<>();

        for (ObjectReflect field : tree.getFields()) {
            try {
                if (field.isAutoGenerated()) {
                    if(oldObj!=null) values.put(field.getFieldName(), oldObj.getValues().get(field.getFieldName()));
                    else values.put(field.getFieldName(), genereteID());
                    continue;
                }

                if (!field.isPrimitive()) {
                    if (field.isMayNull() ) {
                        if(oldObj!=null) values.put(field.getFieldName(),(T) oldObj.getValues().get(field.getFieldName()));
                        values.put(field.getFieldName(), null);
                    }
                    else {
                        System.out.println("Сектор " + field.getFieldName());
                        if(oldObj!=null) values.put(field.getFieldName(), buildDialogue(field, (T) oldObj.getValues().get(field.getFieldName())));
                        else values.put(field.getFieldName(), buildDialogue(field));

                    }
                    continue;
                }

                while (true) {
                    System.out.print("Введите " + field.getFieldName() + " (" + field.getFieldType() + ")");
                    if(oldObj!=null) {
                        System.out.println(" prev= " + oldObj.getValues().get(field.getFieldName()));
                        System.out.print("Чтобы оставить старое значение нажмите Enter");
                    }
                    System.out.println();

                    if (field.isEnum()) {
                        output.print("\t" + "Возможные значения: ");
                        for(Object o : field.getEnumContains().values()) output.print(o + " ");
                        output.println(" ");
                    }
                    //System.out.println("DEBUG : ожидаю команду от " + inputHandler.getClass().getSimpleName());
                    String value = input.get();
                    if(isFile()) output.println("> " + value);
                    //System.out.println("DEBUG: \'" + value+"\'");

                    if(value.strip().equals("")) {

                        if(oldObj!=null){
                            values.put(field.getFieldName(), oldObj.getValues().get(field.getFieldName()));
                            break;
                        }
                        else if (field.isMayNull()){
                            values.put(field.getFieldName(), Converter.convert(field.getFieldType(), null));
                            break;
                        }

                    }

                    try {
                        values.put(field.getFieldName(), isValid(field, value));
                        break;
                    }  catch (IllegalArgumentException e) {
                        System.out.println("Вы ввели недопустимое значение! " + e.getMessage() + ". Повторите ввод");
                        if(isFile()) break;
                    }
                }
            }
            catch ( IOException e) {
                System.out.println(e.getMessage());//e.printStackTrace();
            }
        }
        obj.init(values);
        return (T) obj;
    }

    /**
     * Build object by values string-map
     * @param tree object tree by ObjTree class
     * @param data values string-map
     * @return new object
     */
    public <T extends Entity> T buildByStringMap(ObjectReflect tree, HashMap<String, String> data) {
        T obj = (T) tree.constructor.get();
        HashMap<String, Object> values = new HashMap<>();

        for (ObjectReflect field : tree.getFields()) {
            try{
                if (!field.isPrimitive()) {
                    HashMap<String, String> buffData = new HashMap<>();
                    boolean nullFlag = true;
                    for(String key: data.keySet()){
                        if(key.contains(field.getFieldName())) {
                            buffData.put(key.substring(field.getFieldName().length() + 1), data.get(key));
                            if (data.get(key) != null) nullFlag = false;
                        }
                    }
                    if(nullFlag) values.put(field.getFieldName(), null);
                    else values.put(field.getFieldName(), buildByStringMap(field, buffData));
                    continue;
                }

                values.put(field.getFieldName(), isValid(field, data.get(field.getFieldName())));
            } catch (Exception e) {
                output.println("Error while input by string: " + e.getMessage());
            }
        }
        obj.init(values);
        return (T)obj;
    }


    private boolean dumbUserProtection(){
        errCounter++;
        if(errCounter>20 || isFile()){
            return true;
        }
        return false;
    }


    /*private boolean askForSkip(String name) throws IOException {
        String ans;
        output.println("Поле " + name + " не обязательное, пропустить? (Y/N)");
        while (true){
            ans = input.get().trim().toUpperCase();
            if(ans.equals("N") || ans.equals("Y")) break;
            else {
                output.printErr("Разве \"" + ans + "\" похоже на Y/N ??, попробуйте еще раз");
                if(dumbUserProtection()) return false;
            }
        }
        return ans.equals("Y");
    }*/


    private Object isValid(ObjectReflect field, String value) throws IllegalArgumentException {
        if(field.isEnum()) {
            if(field.getEnumContains().containsKey(value)) {
                return field.getEnumContains().get(value);
            } else {
                throw new IllegalArgumentException("Не существующая константа");
            }
        } else {
            if (field.getValidators() != null) {
                Validator.validate(value, field.getValidators());

            }
            return Converter.convert(field.getFieldType(), value);
        }
    }


    private boolean isFile(){
        return input.getClass() == FileInput.class;
    }
}