package org.example.Tools;

import org.example.MyCollection.DataClasses.Entity;
import org.example.Tools.Validators.Validatable;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.function.Supplier;

public class MyObjReflect {

    private boolean isMayNull = true;
    private boolean isAutoGenerated = false;
    private boolean isEnum = false;
    private boolean isPrimitive = false;

    private Class<?> fieldType;
    public Supplier<? extends Entity> constructor;

    private ArrayList<ObjectReflect> fields = new ArrayList<>();

    private ArrayList<Validatable> validators = new ArrayList<>();
    private HashMap<String, Enum<?>> enumContains = new HashMap<>();


    private Class<?> theClass ;
    private String theName;
    //public <>

    HashMap<Class<?> , ArrayList<Field>> notPrimitiveFields = new HashMap<>();
    HashMap<String, ArrayList<Enum<?>>> enumFields = new HashMap<>();

    HashMap<Class<?>, Annotation[]> validatorList = new HashMap<>();


    public MyObjReflect(Class<?> classType){
        createNewClass(classType);
    }

    public HashMap<String, ArrayList<Enum<?>>> getEnumFields(){
        return enumFields;
    }


    public void createNewClass(Class<?> classType)  {
        this.theClass = classType;
        this.theName = classType.getName();
        if (theClass.isEnum()){
            isEnumType();
        }
        getValidate();
        if(!theClass.isPrimitive() && theClass.isEnum()){
        }
    }

    private void isComplexType(){

    }

    private void getValidate(){
        Annotation[] annotations = theClass.getAnnotations();

        if(annotations.length > 0){
            validatorList.put(theClass, annotations);
        }

    }

    private void isEnumType(){
        ArrayList<Enum<?>> tmp = new ArrayList<>();
        for(Object enums : theClass.getEnumConstants()){
            tmp.add((Enum<?>) enums);
        }
        enumFields.put(theName, tmp);
    }




}
